name: Deploy to ECS using CodeDeploy

on:
  push:
    branches: [main]

env:
  AWS_REGION: eu-west-1
  INFRA_S3_BUCKET: ${{ secrets.INFRA_S3_BUCKET }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR
        run: ./mvnw clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_URI }}:${{ secrets.IMAGE_TAG }} .
          docker push ${{ secrets.ECR_URI }}:${{ secrets.IMAGE_TAG }}

      - name: Replace image URI in imagedefinitions.json
        run: |
          echo '[{"name":"image-app","imageUri":"${{ secrets.ECR_URI }}:${{ secrets.IMAGE_TAG }}"}]' > imagedefinitions.json

      - name: Register new ECS task definition
        run: |
          sed "s|<IMAGE_URI>|${{ secrets.ECR_URI }}:${{ secrets.IMAGE_TAG }}|g" taskdef.json > taskdef-rendered.json
          aws ecs register-task-definition --cli-input-json file://taskdef-rendered.json > taskdef-out.json
          TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' taskdef-out.json)
          sed "s|<TASK_DEFINITION_ARN>|$TASK_DEF_ARN|g" appspec.json > appspec-rendered.json

      - name: Upload artifacts to S3
        run: |
          aws s3 cp appspec-rendered.json s3://${{ env.INFRA_S3_BUCKET }}/deployments/appspec.json
          aws s3 cp imagedefinitions.json s3://${{ env.INFRA_S3_BUCKET }}/deployments/imagedefinitions.json

      - name: Trigger deployment
        run: |
          aws deploy create-deployment \
            --application-name image-app \
            --deployment-group-name image-app-deploy-group \
            --s3-location bucket=${{ env.INFRA_S3_BUCKET }},bundleType=json,key=deployments/appspec.json \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce